plugins {
    id 'application'
    id 'com.github.kt3k.coveralls' version '2.8.2'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.8.0'
}

project.description = 'LedBorg REST-Interface'
project.version = '1.0.2-SNAPSHOT'

sourceCompatibility = 1.8
targetCompatibility = 1.8

mainClassName = "de.freitag.stefan.ledborg.rest.LedBorgRestApplication"

repositories {
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/groups/public'
    }
}

dependencies {
    compile project(':borg-core')
    compile("io.dropwizard:dropwizard-core:1.2.2")
    testCompile('org.glassfish.jersey.core:jersey-client:2.17')

    testCompile("org.junit.jupiter:junit-jupiter-api:5.0.2")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.0.2")
    testCompileOnly 'org.apiguardian:apiguardian-api:1.0.0'
}
applicationDistribution.from("src/main/resources/config.yml") {
    into "bin"
}

run {
    args 'server', 'src/main/resources/config.yml'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

findbugs {
    ignoreFailures = true
    effort = "max"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

pmd {
    ignoreFailures = true
    ruleSets = [
            "java-basic",
            "java-braces",
            "java-design",
            "java-finalizers",
            "java-junit",
            "java-naming",
            "java-optimizations",
            "java-strings",
            "java-unusedcode"
    ]
}

def pomConfig = {
    inceptionYear '2015'

    licenses {
        license {
            name "The MIT License (MIT)"
            url "https://github.com/stefanfreitag/LedBorg/blob/master/LICENSE"
            distribution "repo"
        }
    }

    scm {
        connection 'scm:git:https://github.com/stefanfreitag/LedBorg/'
        developerConnection 'scm:git:https://github.com/stefanfreitag/LedBorg/'
        url 'https://github.com/stefanfreitag/LedBorg/'
    }
    developers {
        developer {
            id "sfreitag"
            name "Stefan Freitag"
            email "stefan@stefreitag.de"
            timezone "Europe/Berlin"
            roles {
                role "developer"
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
            artifact javadocJar
            artifact distZip

            groupId 'de.freitag.stefan.ledborg'
            artifactId 'borg-rest'
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Allows RESTful access to LedBorg')
                root.children().last() + pomConfig
            }
        }
    }
}

bintrayUpload.dependsOn(build)

bintray {
    if (!project.hasProperty('bintray_user')) {
        project.ext.bintray_user = 'default'
    }
    if (!project.hasProperty('bintray_api_key')) {
        project.ext.bintray_api_key = 'default'
    }

    user = "$bintray_user"
    key = "$bintray_api_key"
    publications = ['mavenJava']
    dryRun = false
    publish = true
    pkg {
        repo = 'maven'
        name = 'borg-rest'
        desc = 'Allows RESTful access to LedBorg'
        websiteUrl = 'https://github.com/stefanfreitag/LedBorg/'
        issueTrackerUrl = 'https://github.com/stefanfreitag/LedBorg/issues'
        vcsUrl = 'git://github.com/stefanfreitag/LedBorg.git'
        licenses = ['MIT']
        labels = []
        publicDownloadNumbers = true
        version {
            name = project.version
            vcsTag = project.version
            gpg {
                sign = true
                passphrase = project.hasProperty('gpg_passphrase') ? gpg_passphrase : ''
            }
        }
    }
}